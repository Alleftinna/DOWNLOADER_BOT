import os
import logging
import asyncio
import aiohttp
import aiofiles
import math
 
import shutil
import subprocess
import re
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, InlineQuery, InlineQueryResultArticle, InlineQueryResultVideo, InputTextMessageContent
from aiogram.filters import Command
 
from dotenv import load_dotenv, find_dotenv
 
import uuid
from pathlib import Path
from cookie_generator import CookieGenerator

# Load environment variables
load_dotenv(find_dotenv())

# Configure logging
logging.basicConfig(level=logging.INFO)

# Create data directory if it doesn't exist
Path("data").mkdir(exist_ok=True)

# Telegram bot configuration
BOT_TOKEN = os.getenv("BOT_TOKEN")
# URL –¥–ª—è cobalt-api –≤ Docker-—Å–µ—Ç–∏: –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤–º–µ—Å—Ç–æ IP
COBALT_API_URL = os.getenv("COBALT_API_URL", "http://cobalt-api:9000")
COBALT_API_KEY = os.getenv("COBALT_API_KEY", "")

# File size constants (in bytes)
MAX_SINGLE_FILE_SIZE = 45 * 1024 * 1024  # 45 MB 
MAX_TOTAL_FILE_SIZE = 500 * 1024 * 1024  # 500 MB
VIDEO_QUALITY = "480"  # Fixed quality: 480p
SEGMENT_DURATION = 120  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø—Ä–∏ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏–∏ –≤–∏–¥–µ–æ

# Supported domains
SUPPORTED_DOMAINS = [
    # Video platforms
    "youtube.com", 
    "youtu.be",
    "tiktok.com",
    "instagram.com",
    "facebook.com",
    "twitter.com",
    "x.com",
    "vimeo.com",
    "bilibili.com",
    "bluesky.com",
    "bsky.app",
    "dailymotion.com",
    "loom.com",
    "ok.ru",
    "pinterest.com",
    "pin.it",
    "reddit.com",
    "rutube.ru",
    "snapchat.com",
    "soundcloud.com",
    "streamable.com",
    "tumblr.com",
    "twitch.tv",
    "vk.com",
    "xiaohongshu.com"
]

# Bot messages
MESSAGES = {
    "welcome": "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.",
    "processing": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...",
    "success": "{}",
    "error_download": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
    "error_send": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {}",
    "file_too_large": "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({}MB). –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...",
    "file_extremely_large": "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({}MB) –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 500MB. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.",
    "sending_part": "{}/{}...",
    "sending_complete": "‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
    "splitting_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
}

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Function to convert bytes to megabytes
def bytes_to_mb(bytes_size):
    return bytes_size / (1024 * 1024)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ
def create_video_temp_dir():
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–Ω—É—Ç—Ä–∏ data
    temp_dir = os.path.join("data", f"video_{uuid.uuid4().hex}")
    os.makedirs(temp_dir, exist_ok=True)
    logging.info(f"Created temporary directory: {temp_dir}")
    return temp_dir

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –Ω–µ–π
def cleanup_temp_dir(temp_dir):
    try:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logging.info(f"Removed temporary directory: {temp_dir}")
    except Exception as e:
        logging.error(f"Error removing temporary directory {temp_dir}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é ffmpeg
async def split_video_with_ffmpeg(video_path, video_dir):
    try:
        output_pattern = os.path.join(video_dir, "part_%03d.mp4")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        probe_cmd = [
            "ffprobe", 
            "-v", "error", 
            "-show_entries", "format=duration", 
            "-of", "default=noprint_wrappers=1:nokey=1", 
            video_path
        ]
        
        result = subprocess.run(probe_cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            logging.error(f"Error getting video duration: {result.stderr}")
            return [], 0
        
        try:
            total_duration = float(result.stdout.strip())
        except (ValueError, TypeError):
            logging.error(f"Invalid duration value: {result.stdout}")
            return [], 0
        
        logging.info(f"Video duration: {total_duration} seconds")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(video_path)
        file_size_mb = bytes_to_mb(file_size)
        logging.info(f"Video size: {file_size_mb:.2f} MB")
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π, –æ–∫—Ä—É–≥–ª—è—è –≤–≤–µ—Ä—Ö
        max_size_mb = MAX_SINGLE_FILE_SIZE / (1024 * 1024)
        num_parts = math.ceil(file_size_mb / max_size_mb)
        logging.info(f"Number of parts needed: {num_parts}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª–∏–≤ –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
        segment_duration = math.floor(total_duration / num_parts)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ - 30 —Å–µ–∫—É–Ω–¥
        if segment_duration < 30:
            segment_duration = 30
            logging.info("Segment duration too small, using minimum 30 seconds")
        
        logging.info(f"Video will be split into approximately {num_parts} parts")
        logging.info(f"Using segment duration: {segment_duration} seconds")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
        cmd = [
            "ffmpeg",
            "-i", video_path,
            "-c", "copy",  # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥–µ–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            "-map", "0",  # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
            "-f", "segment",
            "-segment_time", str(segment_duration),
            "-reset_timestamps", "1",
            "-segment_format", "mp4",
            output_pattern
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = process.communicate()
        
        if process.returncode != 0:
            logging.error(f"Error splitting video with ffmpeg: {stderr.decode()}")
            return [], 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        parts = sorted([os.path.join(video_dir, f) for f in os.listdir(video_dir) if f.startswith("part_") and f.endswith('.mp4')])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–µ –ø—É—Å—Ç—ã–µ
        valid_parts = []
        for part in parts:
            part_size = os.path.getsize(part)
            part_size_mb = bytes_to_mb(part_size)
            
            if part_size == 0:
                logging.error(f"Empty part file: {part}")
                continue
            
            valid_parts.append(part)
            logging.info(f"Part {len(valid_parts)}: {part_size_mb:.2f} MB")
        
        return valid_parts, len(valid_parts)
    except Exception as e:
        logging.error(f"Error in split_video_with_ffmpeg: {e}")
        return [], 0

# Function to download video using Cobalt service
async def download_video(url):
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
    video_dir = create_video_temp_dir()
    
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    
    # Add authorization header if API key is provided
    if COBALT_API_KEY:
        headers["Authorization"] = f"Api-Key {COBALT_API_KEY}"
    
    payload = {
        "url": url,
        "videoQuality": VIDEO_QUALITY,
        "audioFormat": "mp3",
        "filenameStyle": "basic",
        "alwaysProxy": True  # Always use proxy to bypass restrictions
    }
    
    try:
        logging.info(f"Sending request to cobalt-api at {COBALT_API_URL}")
        async with aiohttp.ClientSession() as session:
            async with session.post(COBALT_API_URL, json=payload, headers=headers) as response:
                result = await response.json()
                
                if result.get("status") == "error":
                    error_details = result.get("error", {})
                    error_code = error_details.get("code", "unknown")
                    error_message = error_details.get("message", "Unknown error")
                    logging.error(f"Error downloading video: Code={error_code}, Message={error_message}")
                    cleanup_temp_dir(video_dir)
                    return None, None, None
                
                if result.get("status") in ["tunnel", "redirect"]:
                    download_url = result.get("url")
                    filename = result.get("filename")
                    
                    # Ensure mp4 extension for the main file
                    if not filename.lower().endswith('.mp4'):
                        filename = f"{filename.rsplit('.', 1)[0] if '.' in filename else filename}.mp4"
                        
                    local_path = os.path.join(video_dir, filename)
                    
                    # Download the file
                    logging.info(f"Downloading video from {download_url}")
                    async with session.get(download_url) as file_response:
                        if file_response.status == 200:
                            async with aiofiles.open(local_path, 'wb') as f:
                                await f.write(await file_response.read())
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                            file_size = os.path.getsize(local_path)
                            if file_size > 0:
                                logging.info(f"Downloaded file size: {bytes_to_mb(file_size):.2f}MB")
                                return local_path, filename, video_dir
                            else:
                                logging.error("Downloaded file is empty")
                                cleanup_temp_dir(video_dir)
                                return None, None, None
                        else:
                            logging.error(f"Error downloading file: HTTP {file_response.status}")
                            cleanup_temp_dir(video_dir)
                            return None, None, None
                
                logging.error(f"Unexpected response status: {result.get('status')}")
                cleanup_temp_dir(video_dir)
                return None, None, None
    except Exception as e:
        logging.error(f"Error during download: {e}")
        cleanup_temp_dir(video_dir)
        return None, None, None

# Helper: fetch direct video URL and thumbnail from Cobalt without downloading
async def get_cobalt_video_info(url):
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    if COBALT_API_KEY:
        headers["Authorization"] = f"Api-Key {COBALT_API_KEY}"

    payload = {
        "url": url,
        "videoQuality": VIDEO_QUALITY,
        "audioFormat": "mp3",
        "filenameStyle": "basic",
        "alwaysProxy": True
    }

    try:
        logging.info(f"Requesting direct URL from cobalt-api at {COBALT_API_URL}")
        async with aiohttp.ClientSession() as session:
            async with session.post(COBALT_API_URL, json=payload, headers=headers) as response:
                result = await response.json()

                if result.get("status") == "error":
                    error_details = result.get("error", {})
                    logging.error(f"Cobalt error: {error_details}")
                    return None, None, None

                if result.get("status") in ["tunnel", "redirect"]:
                    direct_url = result.get("url")
                    filename = result.get("filename") or "video.mp4"
                    # Try to get thumbnail if provided by API; otherwise None
                    thumbnail = result.get("thumbnail") or result.get("thumb") or None
                    # Ensure .mp4 extension for Telegram inline video
                    if not filename.lower().endswith('.mp4'):
                        filename = f"{filename.rsplit('.', 1)[0] if '.' in filename else filename}.mp4"
                    return direct_url, thumbnail, filename

                logging.error(f"Unexpected cobalt status for inline: {result.get('status')}")
                return None, None, None
    except Exception as e:
        logging.error(f"Error getting cobalt direct url: {e}")
        return None, None, None

# Command handler for /start and /help commands
@dp.message(Command("start", "help"))
async def send_welcome(message: Message):
    await bot.send_message(
        chat_id=message.chat.id,
        text=MESSAGES["welcome"],
        message_thread_id=message.message_thread_id
    )

# Inline mode handler: accepts a video link and returns the video without caption
@dp.inline_query()
async def inline_video_handler(query: InlineQuery):
    text = (query.query or "").strip()

    # If empty query, return no results (or could provide tips)
    if not text:
        await query.answer([], is_personal=True, cache_time=1)
        return

    # Extract URL and validate supported domains
    url = extract_url_from_text(text) or text
    if not any(domain in url.lower() for domain in SUPPORTED_DOMAINS):
        await query.answer([], is_personal=True, cache_time=1)
        return

    video_url, thumb_url, filename = await get_cobalt_video_info(url)

    if video_url:
        result = InlineQueryResultVideo(
            id=str(uuid.uuid4()),
            video_url=video_url,
            mime_type="video/mp4",
            thumbnail_url=thumb_url or "https://via.placeholder.com/320x180?text=Video",
            title="–í–∏–¥–µ–æ"
            # No caption to satisfy "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        )
        await query.answer([result], is_personal=True, cache_time=1)
    else:
        error_result = InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–û—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
            input_message_content=InputTextMessageContent(message_text=MESSAGES["error_download"]) 
        )
        await query.answer([error_result], is_personal=True, cache_time=1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_url_from_text(text):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
    url_pattern = r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+[/\w\.-]*(?:\?[-\w%&=.]*)?\S*'
    matches = re.findall(url_pattern, text)
    
    if matches:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        return matches[0]
    return None

restricted_threads = [8740]
# Handle text messages with URLs
@dp.message(F.text)
async def handle_text_message(message: Message):
    text = message.text
    video_dir = None
    if message.message_thread_id in restricted_threads:
        return
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_mention = get_user_mention(message)
    

    # Simple URL detection using the SUPPORTED_DOMAINS variable
    if any(domain in text.lower() for domain in SUPPORTED_DOMAINS):
        url = extract_url_from_text(text)
        if url:
            text = url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        else:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg = await bot.send_message(
            chat_id=message.chat.id,
            text=MESSAGES["processing"],
            message_thread_id=message.message_thread_id
        )
        
        try:
            # Download the video with fixed 480p quality
            file_path, filename, video_dir = await download_video(url)
            
            if file_path:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥–ø–∏—Å–∏ –≤–∏–¥–µ–æ
                caption = f"{MESSAGES['success'].format(filename)}\n{user_mention}\n{text}"
                
                # Check file size and send accordingly
                await handle_video_sending(message, file_path, caption, video_dir, user_mention, text)
                await message.delete()
            else:
                await send_message_to_chat(message, MESSAGES["error_download"])
        finally:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.delete()
            

            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏
            if video_dir:
                cleanup_temp_dir(video_dir)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
async def send_message_to_chat(message: Message, text: str):
    await bot.send_message(
        chat_id=message.chat.id,
        text=text,
        message_thread_id=message.message_thread_id
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_mention(message: Message) -> str:
    if message.from_user:
        if message.from_user.username:
            return f"@{message.from_user.username}"
        else:
            return f"{message.from_user.full_name}"
    return ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
async def handle_video_sending(message: Message, file_path: str, caption: str, video_dir: str, user_mention: str, url: str):
    try:
        # Check file size
        file_size = os.path.getsize(file_path)
        file_size_mb = bytes_to_mb(file_size)
        logging.info(f"File size: {file_size_mb:.2f}MB")
        
        # Handle different file size scenarios
        if file_size <= MAX_SINGLE_FILE_SIZE:
            await send_single_video(message, file_path, caption)
        elif file_size <= MAX_TOTAL_FILE_SIZE:
            await send_split_video(message, file_path, video_dir, user_mention, url)
        else:
            # File is too large (>500MB)
            await send_message_to_chat(message, MESSAGES["file_extremely_large"].format(round(file_size_mb, 2)))
    except Exception as e:
        await send_message_to_chat(message, MESSAGES["error_send"].format(str(e)))
        logging.error(f"Error sending video: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ
async def send_single_video(message: Message, file_path: str, caption: str):
    video = FSInputFile(file_path)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ
    video_dir = os.path.dirname(file_path)
    thumbnail_path = await create_thumbnail(file_path, video_dir)
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    if thumbnail_path:
        thumbnail = FSInputFile(thumbnail_path)
        await bot.send_video(
            chat_id=message.chat.id,
            video=video, 
            caption=caption, 
            thumbnail=thumbnail,
            message_thread_id=message.message_thread_id
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
        await bot.send_video(
            chat_id=message.chat.id,
            video=video, 
            caption=caption,
            message_thread_id=message.message_thread_id
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
async def send_split_video(message: Message, file_path: str, video_dir: str, user_mention: str, url: str):
    # –ì–æ—Ç–æ–≤–∏–º –≤–∏–¥–µ–æ –∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –Ω–∞ —á–∞—Å—Ç–∏
    file_size = os.path.getsize(file_path)
    file_size_mb = bytes_to_mb(file_size)
    
    temp_msg = await bot.send_message(
        chat_id=message.chat.id,
        text=MESSAGES["file_too_large"].format(round(file_size_mb, 2)),
        message_thread_id=message.message_thread_id
    )
    
    # Split the video using ffmpeg
    parts, total_parts = await split_video_with_ffmpeg(file_path, video_dir)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏
    await temp_msg.delete()
    
    if parts and total_parts > 0:
        await send_video_parts(message, parts, total_parts, user_mention, url)
    else:
        await send_message_to_chat(message, MESSAGES["splitting_error"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–µ–π –≤–∏–¥–µ–æ
async def send_video_parts(message: Message, parts: list, total_parts: int, user_mention: str, url: str):
    # Send each part as video
    for i, part_path in enumerate(parts, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —á–∞—Å—Ç–∏
        part_size = os.path.getsize(part_path)
        part_size_mb = bytes_to_mb(part_size)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ
        part_caption = get_part_caption(i, total_parts, user_mention, url)
            
        logging.info(f"Sending part {i}/{total_parts}, size: {part_size_mb:.2f}MB")
        await send_video_part(message, part_path, part_caption, i)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ
def get_part_caption(part_num: int, total_parts: int, user_mention: str, url: str) -> str:
    if part_num == 1:
        return f"{MESSAGES['sending_part'].format(part_num, total_parts)}\n{user_mention}\n{url}"
    elif part_num == total_parts:
        return MESSAGES["sending_complete"]
    else:
        return MESSAGES["sending_part"].format(part_num, total_parts)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ
async def send_video_part(message: Message, part_path: str, caption: str, part_index=None):
    video = FSInputFile(part_path)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    video_dir = os.path.dirname(part_path)
    thumbnail_path = await create_thumbnail(part_path, video_dir, part_index)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ —Å –ø—Ä–µ–≤—å—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if thumbnail_path:
            thumbnail = FSInputFile(thumbnail_path)
            await bot.send_video(
                chat_id=message.chat.id,
                video=video, 
                caption=caption, 
                thumbnail=thumbnail,
                message_thread_id=message.message_thread_id
            )
        else:
            await bot.send_video(
                chat_id=message.chat.id,
                video=video, 
                caption=caption,
                message_thread_id=message.message_thread_id
            )
    except Exception as e:
        logging.error(f"Error sending part as video: {e}, trying as document")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        doc = FSInputFile(part_path)
        await bot.send_document(
            chat_id=message.chat.id,
            document=doc, 
            caption=f"{caption} (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏)",
            message_thread_id=message.message_thread_id
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é –∏–∑ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
async def create_thumbnail(video_path, video_dir, unique_suffix=None):
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—É—Ñ—Ñ–∏–∫—Å
    if unique_suffix is not None:
        thumbnail_path = os.path.join(video_dir, f"thumbnail_{unique_suffix}.jpg")
    else:
        thumbnail_path = os.path.join(video_dir, "thumbnail.jpg")
        
    try:
        # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –≤–∏–¥–µ–æ
        cmd = [
            "ffmpeg",
            "-i", video_path,
            "-ss", "00:00:03",  # –ë–µ—Ä–µ–º –∫–∞–¥—Ä —Å 3-–π —Å–µ–∫—É–Ω–¥—ã
            "-frames:v", "1",   # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–¥—Ä
            "-q:v", "2",        # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            "-f", "image2",     # –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            thumbnail_path
        ]
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        stdout, stderr = process.communicate()
        
        if process.returncode != 0:
            logging.error(f"Error creating thumbnail: {stderr.decode()}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
        if os.path.exists(thumbnail_path) and os.path.getsize(thumbnail_path) > 0:
            logging.info(f"Created thumbnail: {thumbnail_path}")
            return thumbnail_path
        else:
            logging.error("Thumbnail file is empty or not created")
            return None
    except Exception as e:
        logging.error(f"Error in create_thumbnail: {e}")
        return None

async def main():
    # Start the bot
    logging.info("Starting bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—É–∫–æ–≤
    try:
        cookie_generator = CookieGenerator()
        cookie_generator.start()
        logging.info("Cookie generator started successfully")
    except Exception as e:
        logging.error(f"Error starting cookie generator: {e}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É data –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        data_path = Path("data")
        if data_path.exists():
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
            for item in data_path.glob("*"):
                if item.is_file():
                    item.unlink()  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                elif item.is_dir():
                    shutil.rmtree(item)  # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            logging.info("Successfully cleaned data directory")
    except Exception as e:
        logging.error(f"Error cleaning data directory: {e}")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
